version: "3.8"

x-common-variables: &common-variables
  POSTGRES: postgresql://postgres:postgres@postgres:5432/postgres?connect_timeout=300
  POSTGRES_COLLAB: postgresql://postgres:postgres@postgres-collab:5432/postgres?connect_timeout=300
  MONGO: mongodb://user:password@mongo:27017
  MONGO_HISTORY: mongodb://user:password@mongo-history:27017
  EXE_ENV: DEV
  JWT_SECRET: EXAMPLE_SECRERT # pass around JWT secret so each service can verify user TODO: add to github secrets on deployment
  REFRESH_COOKIE_KEY: EXAMPLE_PEERPREPREFRESHTOKEN
  ACCESS_COOKIE_KEY: EXAMPLE_PEERPREPACCESSTOKEN
  SERVER_PORT: 3000

networks:
  frontend:
  backend:

services:
  user:
    container_name: user
    build:
      dockerfile: ./microservices/user/Dockerfile.local
      context: ./backend
    volumes:
      - ./backend/microservices/user:/home/microservices/user/
      - /home/microservices/user/node_modules
    ports:
      - 8080:3000
    restart: on-failure
    networks:
      - backend
    environment:
      <<: *common-variables
      LOGIN_REDIRECT_URL: http://localhost:3000/dashboard

  redis:
    container_name: redis
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - backend

  redis-document:
    container_name: redis-document
    image: redis:latest
    ports:
      - "6380:6379"
    networks:
      - backend

  videostreaming:
    container_name: videostreaming
    build:
      dockerfile: ./microservices/videostreaming/Dockerfile.local
      context: ./backend
    volumes:
      - ./backend/microservices/videostreaming:/home/node/app/
      - /home/node/app/node_modules
    ports:
      - 8081:3000
    restart: on-failure
    networks:
      - backend
    depends_on:
      - redis
    environment:
      <<: *common-variables
      REDIS_URL: rediss://default:abe53920082242ca86a2ecf741fe86fb@engaged-hedgehog-38273.upstash.io:38273

  question:
    container_name: question
    build:
      dockerfile: ./microservices/question/Dockerfile.local
      context: ./backend
    volumes:
      - ./backend/microservices/question:/home/microservices/question/
      - /home/microservices/question/node_modules
    ports:
      - 3001:3000
    restart: on-failure
    networks:
      - backend
    environment:
      <<: *common-variables

  collaboration:
    container_name: collaboration
    build:
      dockerfile: ./microservices/collaboration/Dockerfile.local
      context: ./backend
    volumes:
      - ./backend/microservices/collaboration:/home/microservices/collaboration/
      - /home/microservices/collaboration/node_modules
    ports:
      - 5001:3000
    restart: on-failure
    networks:
      - backend
    environment:
      <<: *common-variables
      SERVER_PORT: 3000

  history:
    container_name: history
    build:
      dockerfile: ./microservices/history/Dockerfile.local
      context: ./backend
    volumes:
      - ./backend/microservices/history:/home/microservices/history/
      - /home/microservices/history/node_modules
    ports:
      - 5003:3000
    restart: on-failure
    networks:
      - backend
    environment:
      <<: *common-variables
      GOOGLE_APPLICATION_CREDENTIALS: "/home/microservices/history/key.json"
      COLLAB_SERVICE_ENDPOINT: "http://nginx:80/collaboration"

  document:
    container_name: document
    build:
      dockerfile: ./microservices/document/Dockerfile.local
      context: ./backend
    volumes:
      - ./backend/microservices/document:/home/microservices/document/
      - /home/microservices/document/node_modules
    ports:
      - 5002:3000
    depends_on:
      - redis-document
    restart: on-failure
    networks:
      - backend
    environment:
      <<: *common-variables
      SERVER_PORT: 3000
      COLLAB_SERVICE_ENDPOINT: "http://nginx:80/collaboration"
      GOOGLE_APPLICATION_CREDENTIALS: "/home/microservices/document/key.json"
      REDIS_DOCUMENT_URL: redis://redis-document:6379

  postgres:
    container_name: postgres
    build:
      context: ./postgres
      dockerfile: Dockerfile
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend

  postgres-collab:
    container_name: postgres-collab
    build:
      context: ./postgres-collab
      dockerfile: Dockerfile
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres-collab:/var/lib/postgresql/data
    ports:
      - "5433:5432" # Use a different port for the new instance, e.g., 5433
    networks:
      - backend

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: pgadmin
    ports:
      - "5050:80"
    networks:
      - backend

  mongo:
    container_name: mongo
    build:
      context: ./mongo
      dockerfile: Dockerfile
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=admin
    volumes:
      - mongo:/data/db
    ports:
      - 27017:27017
    networks:
      - backend
  
  mongo-history:
    container_name: mongo-history
    build:
      context: ./mongo-history
      dockerfile: Dockerfile
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=admin
    volumes:
      - mongo-history:/data/db
    ports:
      - 64000:27017
    networks:
      - backend

  mongo-express:
    image: mongo-express
    ports:
      - "8082:8082"
    environment:
      - ME_CONFIG_MONGODB_URL="mongo://user:password@mongo:27017/"
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_ADMINUSERNAME=user
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
    networks:
      - backend

  matching:
    container_name: matching
    build:
      dockerfile: ./microservices/matching/Dockerfile.dev
      context: ./backend
    volumes:
      - ./backend/microservices/matching:/home/microservices/matching/
      - /home/microservices/matching/node_modules
    ports:
      - 7001:3000
    restart: on-failure
    networks:
      - backend
    environment:
      <<: *common-variables
      GOOGLE_APPLICATION_CREDENTIALS: "/home/microservices/matching/key.json"
      COLLAB_SERVICE_ENDPOINT: "http://nginx:80/collaboration"
      MATCHING_REQUEST_REDIS_URL: "redis://redis:6379"
      MATCHING_PAIR_REDIS_URL: "redis://redis:6379"

  nginx:
    depends_on:
      - client
      - user
      - matching
    restart: always
    build:
      dockerfile: Dockerfile.dev
      context: ./nginx
    ports:
      - "3000:80"
    networks:
      - backend
      - frontend

  client:
    build:
      dockerfile: Dockerfile.local
      context: ./frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - frontend

volumes:
  postgres:
  postgres-collab:
  mongo:
  mongo-history:
